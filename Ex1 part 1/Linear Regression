# -*- coding: utf-8 -*-
"""
Created on Fri Dec 22 13:22:27 2017

@author: rajen
"""
#import pandas as pd
import numpy as np
from matplotlib import cm
import matplotlib.pyplot as plt
#from sklearn.linear_model import LinearRegression
#from mpl_toolkits.mplot3d import axes3d
#from sklearn import linear_model

# ==================== Part 1: Basic Function ====================
# Complete warmUpExercise.py
print 'Running warmUpExercise ...'
print '5x5 Identity Matrix:'
warmup =np.identity(5)
print warmup
raw_input("Program paused. Press Enter to continue...")

# ======================= Part 2: Plotting =======================

data = np.loadtxt('D:\Coursera\Machine Learning\Coursera-Stanford-ML-Python-master\Coursera-Stanford-ML-Python-master\ex1\ex1data1.txt', delimiter=',')
m = data.shape[0]
X = np.vstack(zip(np.ones(m),data[:,0]))
y = np.c_[data[:,1]]

plt.scatter(X[:,1], y, s=30, c='r', marker='+', linewidths=2)
plt.xlim(4,24)
plt.xlabel('Population of City in 10,000s')
plt.ylabel('Profit in $10,000s')
plt.show()
raw_input("Program paused. Press Enter to continue...")

# =================== Part 3: Gradient descent ===================
print 'Running Gradient Descent ...'
theta = np.zeros(2).reshape(2,1)

def computeCost(X, y, theta):
    m = y.size
    J = 0    
    h = X.dot(theta)
    J = (np.sum(np.square(h-y)))/(2*m)
    return(J)
    
J = computeCost(X, y, theta)
print 'cost: %0.4f ' % J

# Some gradient descent settings
iterations = 1500
alpha = 0.01

# run gradient descent
def gradientDescent(X, y, theta, alpha ,iterations):
    m = y.size
    J_history = np.zeros(iterations)
    
    for iter in np.arange(iterations):
        h = X.dot(theta)
        delta = X.T.dot(h-y)
        alphatimes = delta * alpha
        temp = alphatimes/m
        theta = theta - temp
        J_history[iter] = computeCost(X, y, theta)
    return(theta, J_history)    
theta, J_history = gradientDescent(X, y, theta, alpha, iterations)
# print theta to screen
print 'Theta found by gradient descent: '
print '%s %s \n' % (theta[0], theta[1])

plt.figure()
#plotData(data)
plt.plot(X[:, 1], X.dot(theta), '-', label='Linear regression')
plt.legend(loc='upper right', shadow=True, fontsize='x-large', numpoints=1)

raw_input("Program paused. Press Enter to continue...")

# Predict values for population sizes of 35,000 and 70,000
predict1 = np.array([1, 3.5]).dot(theta)
predict2 = np.array([1, 7]).dot(theta)
print 'For population = 35,000, we predict a profit of ', predict1*10000
print 'For population = 70,000, we predict a profit of ', predict2*10000

raw_input("Program paused. Press Enter to continue...")

# ============= Part 4: Visualizing J(theta_0, theta_1) =============
print 'Visualizing J(theta_0, theta_1) ...'

# Grid over which we will calculate J
theta0_vals = np.linspace(-10, 10, X.shape[0])
theta1_vals = np.linspace(-1, 4, X.shape[0])

# initialize J_vals to a matrix of 0's
J_vals=np.array(np.zeros(X.shape[0]).T)

for i in range(theta0_vals.size):
    col = []
    for j in range(theta1_vals.size):
        t = np.array([theta0_vals[i],theta1_vals[j]])
        col.append(computeCost(X, y, t.T))
    J_vals=np.column_stack((J_vals,col))

# Because of the way meshgrids work in the surf command, we need to
# transpose J_vals before calling surf, or else the axes will be flipped
J_vals = J_vals[:,1:].T
theta0_vals, theta1_vals = np.meshgrid(theta0_vals, theta1_vals)

# Surface plot
fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot_surface(theta0_vals, theta1_vals, J_vals, rstride=8, cstride=8, alpha=0.3,
                cmap=cm.coolwarm, linewidth=0, antialiased=False)
ax.set_xlabel(r'$\theta_0$')
ax.set_ylabel(r'$\theta_1$')
ax.set_zlabel(r'J($\theta$)')
plt.show()

# Contour plot
plt.figure()

# Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100
ax = plt.contour(theta0_vals, theta1_vals, J_vals, np.logspace(-2, 3, 20))
plt.clabel(ax, inline=1, fontsize=10)
plt.xlabel(r'$\theta_0$')
plt.ylabel(r'$\theta_1$')
plt.plot(0.0, 0.0, 'rx', linewidth=2, markersize=10)
plt.show()



